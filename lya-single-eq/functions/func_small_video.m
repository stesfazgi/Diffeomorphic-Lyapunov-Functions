function [] = func_small_video(phipath, outpath)
%FUNC_SMALL_VIDEO Create a video over the individual layers of a diffeo to
%visualize how the Lyapunov function is deformed. A "small" video just
%plots the morphing of V and the datapoints (ignoring the center movement)

% Inputs:
%   phipath         Path to .mat file generated by "func_run_seq.m".
%                   These files can be created in a batch 
%                   with "run_shapes_diffeo_lya.m".
%
%   outpath         Filepath for the video. Must end with ".avi"


% Outputs:
%   -               (The script saves all outputs to files)

    % Load results
    load(phipath);
    shape_id = params.shape_id;

    % Framerate of video in frames per second
    framerate = 10;
    % Padding arround the shape min/max
    plot_padding = 0.5;
    % Size of datapoint markers
    dot_size = 15;

    % Load dataset
    n_samples = 30;
    n_data = n_samples;
    [data_pos, data_vel, ~, ~] = plot_shape(shape_id, 1, n_samples, false, [50 100]);
    [data_pos_full, ~, ~, ~] = plot_shape(shape_id, 1, 500, false, [50 0]);
    
    % Normalize dataset
    scale_factor = 1/max(abs(data_pos(:)));
    data_pos = data_pos*scale_factor;
    data_pos_full = data_pos_full*scale_factor;
    data_vel = data_vel*scale_factor;

    % Determine plotting bounds
    x1_length = abs(max(data_pos(1, :)) - min(data_pos(1, :)));
    x2_length = abs(max(data_pos(2, :)) - min(data_pos(2, :)));
    if x1_length > x2_length
        x1_lim = [min(data_pos(1, :))-plot_padding max(data_pos(1, :))+plot_padding];
        x2_mid = max(data_pos(2, :)) - x2_length/2;
        x2_lim = [x2_mid-0.5-plot_padding x2_mid+0.5+plot_padding];
    else
        x2_lim = [min(data_pos(2, :))-plot_padding max(data_pos(2, :))+plot_padding];
        x1_mid = max(data_pos(1, :)) - x1_length/2;
        x1_lim = [x1_mid-0.5-plot_padding x1_mid+0.5+plot_padding];
    end

    % Create evaluation grid
    n_eval_x1 = 100;
    n_eval_x2 = 100;
    [evalgrid_x1, evalgrid_x2, x_eval] = func_grid_2D(x1_lim, x2_lim, n_eval_x1, n_eval_x2);
    n_eval = size(x_eval, 2);

    % Get number of layers of diffeo
    n_layers = length(phi.alphas_per_layer);

    % Generate filename
    filename_video = strcat(outpath, ".avi");

    % Create and open video file
    writerObj = VideoWriter(filename_video);
    writerObj.FrameRate = framerate;
    open(writerObj);

    % Loop over all diffeo layers to create frame after frame
    close all;
    figure;
    for i=1:n_layers
        % Propagate evaluation grid through diffeo
        z_eval = func_phi_forward_partial(x_eval, phi, 1, i);

        % Evaluate Lyapunov function
        V_fit = func_Vz(z_eval);
        V_fit = reshape(V_fit, size(evalgrid_x1, 2), size(evalgrid_x2, 2));
        
        % Determine datapoints/centers with violation
        vios_per_center = zeros(n_data, 1);
        for j=1:n_data
            dVdx_curr = func_grad_V_partial(phi, x_data(:, j), 1, i);
            vios_per_center(j) = dVdx_curr'*dx_data(:, j) > 1e-3;
        end
        
        % Initialize current frame
        figure("Position", [0 0 400 400]);
        hold on;
        % Plot value function
        contour(evalgrid_x1, evalgrid_x2, V_fit', linspace(0, max(V_fit(:)), 50));
        % Plot complete trajectory
        plot(data_pos_full(1, :), data_pos_full(2, :), "k", "LineWidth", 1.5, "DisplayName", "Demonstration");
        % Plot datapoints/centers in color depending on violations
        for j=1:n_data
            if vios_per_center(j)
                plot(x_data(1, j), x_data(2, j), "r.", "LineStyle", "none", "MarkerSize", dot_size, "HandleVisibility", "off");
            else
                plot(x_data(1, j), x_data(2, j), "g.", "LineStyle", "none", "MarkerSize", dot_size, "HandleVisibility", "off");
            end
        end
        plot(0, 0, "g.", "LineStyle", "none", "MarkerSize", dot_size, "HandleVisibility", "off");
        xlim(x1_lim);
        ylim(x2_lim);
        box on;
        axis equal;
        set(gca,'xtick',[])
        set(gca,'xticklabel',[])
        set(gca,'ytick',[])
        set(gca,'yticklabel',[])
        set(gcf,'color','w');

        % Write current figure as frame to video file
        writeVideo(writerObj, getframe(gcf));
        clf;
        fprintf("Finished frame %i/%i \n", i, n_layers);
        close all;

    end

    close(writerObj);


    


    

end

